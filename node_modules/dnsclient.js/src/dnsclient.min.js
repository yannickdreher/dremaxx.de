/*
 * Project:  dnsclient.js
 * File:     dnsclient.min.js
 * Author:   Yannick Dreher (yannick.dreher@dremaxx.de)
 * -----
 * Created:  Sunday, 1st December 2024 7:54:45 pm
 * Modified: Tuesday, 14th January 2025 5:05:06 pm
 * -----
 * License: MIT License (https://opensource.org/licenses/MIT)
 * Copyright Â© 2024-2025 Yannick Dreher
 */
const QR_NAMES=Object.freeze({0:"QUERY",1:"RESPONSE"}),OPCODE_NAMES=Object.freeze({0:"QUERY",1:"IQUERY",2:"STATUS",3:"RESERVED",4:"NOTIFY",5:"UPDATE",6:"DSO"}),RCODE_NAMES=Object.freeze({0:"NOERROR",1:"FORMERR",2:"SERVFAIL",3:"NXDOMAIN",4:"NOTIMP",5:"REFUSED",6:"YXDOMAIN",7:"XRRSET",8:"NOTAUTH",9:"NOTZONE",10:"BADVERS",11:"BADSIG",12:"BADKEY",13:"BADTIME",14:"BADMODE",15:"BADNAME",16:"BADALG",17:"BADTRUNC",18:"BADCOOKIE"}),TYPE_NAMES=Object.freeze({1:"A",2:"NS",3:"MD",4:"MF",5:"CNAME",6:"SOA",7:"MB",8:"MG",9:"MR",10:"NULL",11:"WKS",12:"PTR",13:"HINFO",14:"MINFO",15:"MX",16:"TXT",17:"RP",18:"AFSDB",19:"X25",20:"ISDN",21:"RT",22:"NSAP",23:"NSAP_PTR",24:"SIG",25:"KEY",26:"PX",27:"GPOS",28:"AAAA",29:"LOC",30:"NXT",31:"EID",32:"NIMLOC",33:"SRV",34:"ATMA",35:"NAPTR",36:"KX",37:"CERT",38:"A6",39:"DNAME",40:"SINK",41:"OPT",42:"APL",43:"DS",44:"SSHFP",45:"IPSECKEY",46:"RRSIG",47:"NSEC",48:"DNSKEY",49:"DHCID",50:"NSEC3",51:"NSEC3PARAM",52:"TLSA",53:"SMIMEA",55:"HIP",56:"NINFO",57:"RKEY",58:"TALINK",59:"CDS",60:"CDNSKEY",61:"OPENPGPKEY",62:"CSYNC",63:"ZONEMD",64:"SVCB",65:"HTTPS",99:"SPF",100:"UINFO",101:"UID",102:"GID",103:"UNSPEC",104:"NID",105:"L32",106:"L64",107:"LP",108:"EUI48",109:"EUI64",249:"TKEY",250:"TSIG",251:"IXFR",252:"AXFR",253:"MAILB",254:"MAILA",255:"ANY",256:"URI",257:"CAA",258:"AVC",259:"DOA",260:"AMTRELAY",32768:"TA",32769:"DLV"}),CLASS_NAMES=Object.freeze({1:"IN",2:"CS",3:"CH",4:"HS",254:"NONE",255:"ANY"});export const TYPE=Object.freeze({A:1,NS:2,CNAME:5,SOA:6,MX:15,TXT:16,AAAA:28,ANY:255});export const CLAZZ=Object.freeze({IN:1,CS:2,CH:3,HS:4,NONE:254,ANY:255});export class Question{constructor(e,t,n){this.name=e,this.type=t,this.clazz=n}}function parseHeaderFlags(e){return{qr:QR_NAMES[e>>15&1],opcode:OPCODE_NAMES[e>>11&15],aa:e>>10&1,tc:e>>9&1,rd:e>>8&1,ra:e>>7&1,rcode:RCODE_NAMES[15&e]}}function parseResponseMessage(e){const t=new DataView(e),n=t.getUint16(0),a=parseHeaderFlags(t.getUint16(2)),r=t.getUint16(4),s=t.getUint16(6),o=t.getUint16(8),A=t.getUint16(10);let i=12;const c=[];for(let e=0;e<r;e++){const e=parseName(t,i);i=e.offset;const n=TYPE_NAMES[t.getUint16(i)],a=CLASS_NAMES[t.getUint16(i+2)];i+=4,c.push({name:e.name,type:n,clazz:a})}const N=[];for(let e=0;e<s;e++){const e=parseName(t,i);i=e.offset;const n=TYPE_NAMES[t.getUint16(i)],a=CLASS_NAMES[t.getUint16(i+2)],r=t.getUint32(i+4),s=t.getUint16(i+8);i+=10;let o=[{key:"",value:""}];if("A"===n){if(4!==s)throw new Error("Invalid IPv4 byte array length.");const e=new Uint8Array(t.buffer.slice(i,i+s)).join(".");i+=s,o=[{key:"ipv4",value:e}]}else if("NS"===n||"CNAME"===n){const e=parseName(t,i);i=e.offset,o=[{key:"name",value:e.name}]}else if("SOA"===n){const e=parseName(t,i);i=e.offset;const n=parseName(t,i);i=n.offset;const a=t.getUint32(i+0),r=t.getUint32(i+4),s=t.getUint32(i+8),A=t.getUint32(i+12),c=t.getUint32(i+16);i+=20,o=[{key:"mname",value:e.name},{key:"rname",value:n.name},{key:"serial",value:a},{key:"refresh",value:r},{key:"retry",value:s},{key:"expire",value:A},{key:"minimum",value:c}]}else if("MX"===n){const e=t.getUint16(i);i+=2;const n=parseName(t,i);i=n.offset,o=[{key:"preference",value:e},{key:"exchange",value:n.name}]}else if("AAAA"===n){if(16!==s)throw new Error("Invalid IPv6 byte array length.");const e=new Uint8Array(t.buffer.slice(i,i+s));i+=s;const n=[];for(let t=0;t<16;t+=2){const a=e[t]<<8|e[t+1];n.push(a.toString(16))}o=[{key:"ipv6",value:n.join(":").replace(/(^|:)0(:0)*(:|$)/,"$1::$3").replace(/:{3,4}/,"::")}]}else if("TXT"===n){const e=t.getUint8(i),n=(new TextDecoder).decode(t.buffer.slice(i+1,i+1+e));i+=s,o=[{key:"text",value:n}]}else i+=s,o=[{key:"info",value:"this RR type is not yet taken into account by dnsclient.js in response parsing."}];N.push({name:e.name,type:n,clazz:a,ttl:r,data:o})}return{transactionID:n,flags:a,qdcount:r,ancount:s,arcount:o,adcount:A,questions:c,answers:N}}function parseQueryMessage(e){const t=crypto.getRandomValues(new Uint8Array(2)),n=new Uint8Array([1,0]),a=new Uint8Array([0,1]),r=e.name.split(".").map((e=>{const t=new Array(e.length+1);t[0]=e.length;for(let n=0;n<e.length;n++)t[n+1]=e.charCodeAt(n);return t})).flat(1/0).concat([0]),s=new Uint8Array([0,e.type]),o=new Uint8Array([0,e.clazz]);return Uint8Array.from([...t,...n,...a,0,0,0,0,0,0,...r,...s,...o])}function parseName(e,t){let n=[],a=e.getUint8(t),r=!1,s=0;for(;0!==a;)192==(192&a)?(r||(s=t+2),t=(63&a)<<8|e.getUint8(t+1),a=e.getUint8(t),r=!0):(t++,n.push((new TextDecoder).decode(e.buffer.slice(t,t+a))),t+=a,a=e.getUint8(t));return r||(s=t+1),{name:n.join("."),offset:s}}export async function query(e,t){let n="";const a=parseQueryMessage(t),r=performance.now(),s=await fetch(e,{method:"POST",headers:{"Content-Type":"application/dns-message"},body:a}),o=performance.now();if(!s.ok)throw new Error(`DNS query request failed with status code: ${s.status}`);n=parseResponseMessage(await s.arrayBuffer());return{message:n,latency:Math.round(o-r)}}